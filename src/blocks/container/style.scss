/**
 * Container Block - Frontend Styles
 *
 * WordPress-First Approach:
 * - Trust WordPress's layout system
 * - Work with WordPress classes, not against them
 * - Only override when necessary for specific features
 */

.dsg-container {
	position: relative;
	width: 100%;
	box-sizing: border-box;
	// Default padding (can be overridden by user-chosen padding via WordPress controls)
	padding: 16px;

	// AGGRESSIVE FULL-WIDTH
	// This is how Elementor/Bricks do it - no fighting with WordPress variables
	&.alignfull {
		width: 100vw !important;
		max-width: none !important;
		margin-left: calc(50% - 50vw) !important;
		margin-right: calc(50% - 50vw) !important;
	}

	// Wide alignment
	&.alignwide {
		max-width: 1200px !important;
		margin-left: auto !important;
		margin-right: auto !important;
	}

	// Video background
	&.has-video-background {
		overflow: hidden;

		.dsg-video-background {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			overflow: hidden;
			z-index: 0;
			pointer-events: none;

			video {
				position: absolute;
				top: 50%;
				left: 50%;
				min-width: 100%;
				min-height: 100%;
				width: auto;
				height: auto;
				transform: translate(-50%, -50%);
				object-fit: cover;
			}
		}
	}

	// Overlay - ensure container constrains overlay boundaries
	&.has-dsg-overlay {
		overflow: hidden;

		.dsg-overlay {
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: rgba(0, 0, 0, 0.5);
			z-index: 1;
			pointer-events: none;
		}
	}

	// Responsive visibility
	@media (min-width: 1024px) {
		&.dsg-hide-desktop {
			display: none !important;
		}
	}

	@media (min-width: 768px) and (max-width: 1023px) {
		&.dsg-hide-tablet {
			display: none !important;
		}
	}

	@media (max-width: 767px) {
		&.dsg-hide-mobile {
			display: none !important;
		}
	}

	// Flex mobile stacking - stack items vertically on mobile
	&.dsg-flex-mobile-stack {
		@media (max-width: 767px) {
			.dsg-container__inner {
				flex-direction: column !important;
			}
		}
	}

	// Clickable container
	&.is-clickable {
		cursor: pointer;
		transition: opacity 0.2s ease;

		&:hover {
			opacity: 0.9;
		}
	}
}

/**
 * Inner container - Responsive grid layout
 * Uses CSS custom properties set via inline styles for responsive columns
 */
.dsg-container__inner {
	width: 100%;
	box-sizing: border-box;

	// Ensure grid/flex children behave properly
	&[style*="grid"] > *,
	&[style*="flex"] > * {
		min-width: 0; // Prevent flex/grid blowout
		box-sizing: border-box;
	}

	// Note: .is-layout-constrained is only applied to stack layouts
	// Flex/grid layouts have this class removed to prevent WordPress layout interference

	// Flex stretch mode - make child items grow to fill space
	// Applied when flex layout has alignItems: stretch
	&[style*="align-items: stretch"],
	&[style*="align-items:stretch"] {
		> * {
			flex: 1 1 0%;
		}
	}

	// Responsive grid columns using CSS custom properties
	// Desktop: uses --dsg-grid-cols-desktop (default, already in inline styles)
	// Tablet: switches to --dsg-grid-cols-tablet
	// Mobile: switches to --dsg-grid-cols-mobile

	@media (max-width: 767px) {
		// Mobile: 1 column by default
		&[style*="display: grid"],
		&[style*="display:grid"] {
			grid-template-columns: repeat(var(--dsg-grid-cols-mobile, 1), 1fr) !important;
		}
	}

	@media (min-width: 768px) and (max-width: 1023px) {
		// Tablet: 2 columns by default
		&[style*="display: grid"],
		&[style*="display:grid"] {
			grid-template-columns: repeat(var(--dsg-grid-cols-tablet, 2), 1fr) !important;
		}
	}

	@media (min-width: 1024px) {
		// Desktop: uses --dsg-grid-cols-desktop (already applied in inline styles)
		// No override needed, inline style handles this
	}

	// Grid item height matching (when "Match Item Heights" is enabled)
	// align-items: stretch makes all grid items in a row match the height of the tallest item
	// Perfect for card layouts where you want consistent heights
	&[style*="display: grid"][style*="align-items: stretch"],
	&[style*="display:grid"][style*="align-items:stretch"] {
		align-items: stretch !important;

		// Ensure child containers and blocks stretch to fill grid cell
		// Exclude block appender to prevent overlay issues
		// EXCEPTION: Don't force height on items with explicit vertical alignment
		> *:not(.block-list-appender):not(.block-editor-block-list__layout):not(.is-vertically-aligned-top):not(.is-vertically-aligned-center):not(.is-vertically-aligned-bottom) {
			height: 100%;
			display: flex;
			flex-direction: column;

			// Nested containers should also stretch
			&.dsg-container,
			&.wp-block-group,
			&.wp-block-cover {
				min-height: 100%;
			}
		}
	}

}

// Grid items should have NO margins - gap property handles all spacing
// This is especially critical for first-child to prevent misalignment
.dsg-container__inner {
	&[style*="display: grid"],
	&[style*="display:grid"] {
		> * {
			margin-block-start: 0;
			margin-block-end: 0;
		}
	}
}

/**
 * Layout-Constrained Margin Rules
 * Matches WordPress Group block behavior EXACTLY for proper vertical spacing
 * Applied ONLY to stack layouts (default flow layout)
 *
 * CRITICAL: Uses :where() for zero specificity to allow WordPress's natural
 * cascade and blockGap system to work properly. DO NOT use higher specificity
 * or !important - it breaks WordPress's layout system.
 *
 * WordPress's Constrained Layout Pattern:
 * - Container can be any width (full, wide, or constrained)
 * - Content blocks (headings, paragraphs) are centered and constrained to
 *   --wp--style--global--content-size (e.g., 1140px) for readable line lengths
 * - Text within blocks follows text-align setting (left, center, right)
 * - This ensures optimal typography even in full-width containers
 *
 * NOTE: We target .dsg-container__inner (inner wrapper) not .wp-block-designsetgo-container (outer)
 * because that's where WordPress applies .is-layout-constrained class for inner blocks.
 */

// First child should have no top margin
:root :where(.dsg-container__inner.is-layout-constrained) > :first-child {
	margin-block-start: 0;
}

// All children get consistent vertical spacing
:root :where(.dsg-container__inner.is-layout-constrained) > * {
	margin-block-start: 1.2rem;
	margin-block-end: 0;
}

// Last child should have no bottom margin
:root :where(.dsg-container__inner.is-layout-constrained) > :last-child {
	margin-block-end: 0;
}

/**
 * Override WordPress-Generated Margin Rules for Flex and Grid Layouts
 *
 * Problem:
 * - WordPress generates .wp-container-* classes with margin-block-start rules
 * - These apply vertical spacing even when we're using CSS Grid or Flexbox
 * - For flex/grid, we use the `gap` property for spacing, not margins
 * - WordPress's margin rules conflict with our gap-based spacing
 * - WordPress adds .is-layout-constrained via PHP on frontend (can't strip via JS)
 *
 * Solution:
 * - Reset vertical margins for flex and grid inner containers
 * - Let gap property (applied via inline styles) handle ALL spacing
 * - Only stack layouts use WordPress's margin-based spacing system
 *
 * CRITICAL: NO !important here - this allows user-chosen margins (inline styles)
 * to take precedence while still overriding WordPress's auto-generated layout margins.
 * Specificity: User inline styles (1-0-0-0) > Our rule (0-2-1) > WordPress :where() (0-0-2)
 */
.dsg-container__inner[style*="display: flex"],
.dsg-container__inner[style*="display:flex"],
.dsg-container__inner[style*="display: grid"],
.dsg-container__inner[style*="display:grid"] {
	> * {
		margin-block-start: 0;
		margin-block-end: 0;
	}
}

/**
 * Additional Override for .is-layout-constrained on Flex/Grid Containers
 *
 * WordPress adds .is-layout-constrained class via PHP rendering on the frontend,
 * even for flex/grid layouts. This rule provides higher specificity to override
 * the constrained layout margins when combined with flex/grid display.
 *
 * We use a normal class selector (not :where()) for higher specificity than
 * WordPress's :where() rules, but still allow user inline styles to win.
 */
.dsg-container__inner.is-layout-constrained[style*="display: flex"],
.dsg-container__inner.is-layout-constrained[style*="display:flex"],
.dsg-container__inner.is-layout-constrained[style*="display: grid"],
.dsg-container__inner.is-layout-constrained[style*="display:grid"] {
	> * {
		margin-block-start: 0;
		margin-block-end: 0;
	}
}

/**
 * Content-Size Constraint Control for Different Layouts
 *
 * WordPress's .is-layout-constrained applies max-width to ALL direct children.
 * This is correct for stack layouts (headings, paragraphs should be constrained).
 * But for flex/grid layouts, children should size naturally according to flex/grid rules.
 *
 * Solution:
 * 1. For stack layouts: Keep max-width but remove auto-centering (so text-align works)
 * 2. For flex/grid layouts: Remove max-width entirely (flex/grid controls sizing)
 */

/* Stack layouts: Keep content-size constraint, remove auto-centering */
:root :where(.dsg-container__inner.is-layout-constrained:not([style*="display: flex"]):not([style*="display:flex"]):not([style*="display: grid"]):not([style*="display:grid"])) > * {
	margin-inline: 0;
}

/* Flex/Grid layouts: Remove content-size constraint entirely */
.dsg-container__inner.is-layout-constrained[style*="display: flex"] > *,
.dsg-container__inner.is-layout-constrained[style*="display:flex"] > *,
.dsg-container__inner.is-layout-constrained[style*="display: grid"] > *,
.dsg-container__inner.is-layout-constrained[style*="display:grid"] > * {
	max-width: none !important;
	margin-inline: 0 !important;
}

/**
 * Vertical Alignment for Grid Items
 *
 * Following WordPress Column block pattern - uses CSS classes instead of inline styles.
 * Applied when container is nested in a grid layout parent.
 */
.dsg-container.is-vertically-aligned-top {
	align-self: start;
}

.dsg-container.is-vertically-aligned-center {
	align-self: center;
}

.dsg-container.is-vertically-aligned-bottom {
	align-self: end;
}
