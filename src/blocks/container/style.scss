/**
 * Container Block - Frontend Styles
 *
 * Layout Engine Approach (following PLAN.md):
 * - Aggressive CSS that takes full control
 * - No reliance on WordPress layout system
 * - JavaScript applies layouts, CSS ensures they work
 */

.dsg-container {
	position: relative;
	width: 100%;
	box-sizing: border-box;

	// AGGRESSIVE FULL-WIDTH
	// This is how Elementor/Bricks do it - no fighting with WordPress variables
	&.alignfull {
		width: 100vw !important;
		max-width: none !important;
		margin-left: calc(50% - 50vw) !important;
		margin-right: calc(50% - 50vw) !important;
	}

	// Wide alignment
	&.alignwide {
		max-width: 1200px !important;
		margin-left: auto !important;
		margin-right: auto !important;
	}

	// Video background
	&.has-video-background {
		overflow: hidden;

		.dsg-video-background {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			overflow: hidden;
			z-index: 0;
			pointer-events: none;

			video {
				position: absolute;
				top: 50%;
				left: 50%;
				min-width: 100%;
				min-height: 100%;
				width: auto;
				height: auto;
				transform: translate(-50%, -50%);
				object-fit: cover;
			}
		}
	}

	// Overlay - ensure container constrains overlay boundaries
	&.has-dsg-overlay {
		overflow: hidden;

		.dsg-overlay {
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: rgba(0, 0, 0, 0.5);
			z-index: 1;
			pointer-events: none;
		}
	}

	// Responsive visibility
	@media (min-width: 1024px) {
		&.dsg-hide-desktop {
			display: none !important;
		}
	}

	@media (min-width: 768px) and (max-width: 1023px) {
		&.dsg-hide-tablet {
			display: none !important;
		}
	}

	@media (max-width: 767px) {
		&.dsg-hide-mobile {
			display: none !important;
		}
	}

	// Clickable container
	&.is-clickable {
		cursor: pointer;
		transition: opacity 0.2s ease;

		&:hover {
			opacity: 0.9;
		}
	}
}

/**
 * Inner container - Responsive grid layout
 * Uses CSS custom properties set via inline styles for responsive columns
 */
.dsg-container__inner {
	width: 100%;
	box-sizing: border-box;

	// Reset any WordPress layout styles that might interfere
	> * {
		max-width: none !important;
	}

	// Ensure grid/flex children behave properly
	&[style*="grid"] > *,
	&[style*="flex"] > * {
		min-width: 0; // Prevent flex/grid blowout
		box-sizing: border-box;
	}

	// Note: .is-layout-constrained is only applied to stack layouts
	// Flex/grid layouts have this class removed to prevent WordPress layout interference

	// Flex layout: ensure justify-content is respected
	&[style*="flex"][style*="justify-content"] {
		// Force justify-content from inline styles to be respected
		// WordPress's layout system might try to override this
		&[style*="justify-content: center"],
		&[style*="justify-content:center"] {
			justify-content: center !important;
		}
		&[style*="justify-content: flex-end"],
		&[style*="justify-content:flex-end"] {
			justify-content: flex-end !important;
		}
		&[style*="justify-content: space-around"],
		&[style*="justify-content:space-around"] {
			justify-content: space-around !important;
		}
		&[style*="justify-content: space-between"],
		&[style*="justify-content:space-between"] {
			justify-content: space-between !important;
		}
	}

	// Flex layout: ensure align-items is respected
	&[style*="flex"][style*="align-items"] {
		// Force align-items from inline styles to be respected
		&[style*="align-items: center"],
		&[style*="align-items:center"] {
			align-items: center !important;
		}
		&[style*="align-items: flex-end"],
		&[style*="align-items:flex-end"] {
			align-items: flex-end !important;
		}
		&[style*="align-items: flex-start"],
		&[style*="align-items:flex-start"] {
			align-items: flex-start !important;
		}
	}

	// Flex stretch mode - make child items grow to fill space
	// Applied when flex layout has alignItems: stretch
	&[style*="align-items: stretch"] > * {
		flex: 1 1 0%;
	}

	// Responsive grid columns using CSS custom properties
	// Desktop: uses --dsg-grid-cols-desktop (default, already in inline styles)
	// Tablet: switches to --dsg-grid-cols-tablet
	// Mobile: switches to --dsg-grid-cols-mobile

	@media (max-width: 767px) {
		// Mobile: 1 column by default
		&[style*="display: grid"],
		&[style*="display:grid"] {
			grid-template-columns: repeat(var(--dsg-grid-cols-mobile, 1), 1fr) !important;
		}
	}

	@media (min-width: 768px) and (max-width: 1023px) {
		// Tablet: 2 columns by default
		&[style*="display: grid"],
		&[style*="display:grid"] {
			grid-template-columns: repeat(var(--dsg-grid-cols-tablet, 2), 1fr) !important;
		}
	}

	@media (min-width: 1024px) {
		// Desktop: uses --dsg-grid-cols-desktop (already applied in inline styles)
		// No override needed, inline style handles this
	}

	// Grid item height matching (when "Match Item Heights" is enabled)
	// align-items: stretch makes all grid items in a row match the height of the tallest item
	// Perfect for card layouts where you want consistent heights
	&[style*="display: grid"][style*="align-items: stretch"],
	&[style*="display:grid"][style*="align-items:stretch"] {
		align-items: stretch !important;

		// Ensure child containers and blocks stretch to fill grid cell
		// Exclude block appender to prevent overlay issues
		> *:not(.block-list-appender):not(.block-editor-block-list__layout) {
			height: 100%;
			display: flex;
			flex-direction: column;

			// Nested containers should also stretch
			&.dsg-container,
			&.wp-block-group,
			&.wp-block-cover {
				min-height: 100%;
			}
		}

		// WordPress sets margin 0 on ALL grid items, but items 2+ get margin from other rules
		// This causes first grid item to appear higher than others
		// Solution: Add margin directly to first child container element
		> .dsg-container:first-child,
		> .wp-block-designsetgo-container:first-child {
			margin-block-start: var(--wp--preset--spacing--md) !important;
		}
	}

	// Also apply for grids without stretch (for consistency)
	&[style*="display: grid"],
	&[style*="display:grid"] {
		// WordPress sets margin 0 on ALL grid items, but items 2+ get margin from other rules
		// This causes first grid item to appear higher than others
		// Solution: Add margin directly to first child container element
		> .dsg-container:first-child,
		> .wp-block-designsetgo-container:first-child {
			margin-block-start: var(--wp--preset--spacing--md) !important;
		}
	}
}

/**
 * Layout-Constrained Margin Rules
 * Matches WordPress Group block behavior EXACTLY for proper vertical spacing
 * Applied when layout support is enabled (type: constrained)
 *
 * CRITICAL: Uses :where() for zero specificity to allow WordPress's natural
 * cascade and blockGap system to work properly. DO NOT use higher specificity
 * or !important - it breaks WordPress's layout system.
 *
 * WordPress's Constrained Layout Pattern:
 * - Container can be any width (full, wide, or constrained)
 * - Content blocks (headings, paragraphs) are centered and constrained to
 *   --wp--style--global--content-size (e.g., 1140px) for readable line lengths
 * - Text within blocks follows text-align setting (left, center, right)
 * - This ensures optimal typography even in full-width containers
 */

// First child should have no top margin
:root :where(.wp-block-designsetgo-container.is-layout-constrained) > :first-child {
	margin-block-start: 0;
}

// All children get consistent vertical spacing
:root :where(.wp-block-designsetgo-container.is-layout-constrained) > * {
	margin-block-start: 1.2rem;
	margin-block-end: 0;
}

// Last child should have no bottom margin
:root :where(.wp-block-designsetgo-container.is-layout-constrained) > :last-child {
	margin-block-end: 0;
}

/**
 * Constrained Layout Width Control
 *
 * We want WordPress's vertical margins but need to conditionally control
 * horizontal centering based on user's "Constrain Width" setting.
 *
 * When constrainWidth is enabled (default):
 * - Let WordPress center and constrain content (good for readability)
 * - Uses theme's --wp--style--global--content-size (e.g., 1140px)
 *
 * When constrainWidth is disabled:
 * - Override WordPress's centering to allow full-width content
 * - User wants content to span the entire container width
 * - Still keep the vertical margin behavior
 *
 * Note: We use data-constrain-width attribute applied by calculateInnerStyles utility
 */
.dsg-container__inner.is-layout-constrained[data-constrain-width="false"] > :where(:not(.alignleft):not(.alignright):not(.alignfull)) {
	margin-left: 0 !important;
	margin-right: 0 !important;
	max-width: none !important;
}
